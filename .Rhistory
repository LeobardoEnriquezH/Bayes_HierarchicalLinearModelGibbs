knitr::opts_chunk$set(echo = TRUE)
#rm(list = ls())
pacman::p_load(tidyverse,tidyr,dplyr,hrbrthemes,
stargazer, LearnBayes, viridis,ggplot2,dlm,
rWishart, LaplacesDemon)
db<-read_csv("https://raw.githubusercontent.com/LeobardoEnriquezH/Data/main/rats.csv")
#stargazer(db[1:30,1:6],summary=FALSE,rownames=FALSE ) #Control group
rats_control<-db[1:30,2:6]
d<-t(rats_control)
d<-data.frame(x=unlist(d))
d<-data.frame(x=unlist(d))
d$week<-rep(c(1,2,3,4,5),times=30)
d$days<-rep(c(8, 15, 22, 29, 36),times=30)
d$rat<-rep(c(1:30),each=5)
d$n<-rep(c(1),times=30)
colnames(d)[1] ="weight"
d<-d%>%relocate(rat)
pr <- ggplot(data=d, aes(x=days, y=weight)) +
geom_line(aes(group=rat), color="cyan4", linewidth=0.1) +
geom_point(color="darkred", size=2) +
labs(x="Edad (días)", y="Peso (gramos)", title="Crecimientos individuales") + theme_bw()
pr
set.seed(20241)
hiergibbs_normlin=function(data,m)
{
###############################################################
# Implements Gibbs sampling algorithm for posterior with hierarchical regression prior
#
# INPUT
# data:  30 by 5 matrix where the observed individuals (rats) are
#        in column 1, weights (covariate) are in column 2, in columns 3 and 4
#         we have the week and the day when the sample was taken,in column 5
#         we have the sample size that the row represents.
# m:  number of cycles of Gibbs sampling
#
# OUTPUT
# a list with
# -- beta: matrix of simulated values of beta with each row a simulated value
# -- mu:  matrix of simulated values of cell means
# -- var:  vector of simulated values of second-stage variance sigma^2_pi
###############################################################
y=data[,2]               #vector of Weights (dependent variable)
n=data[,5]               #vector of sample sizes  (5weeksx30rats=150=n)
x1=data[,4]              #Age (days), covariated 1 (independent variables)
X=cbind(1+0*x1,x1)    #design matrix
s2=1/5              #known sample variance sigma^2/n.We assume 1/5
p=2; N=length(y)         #number of parameters beta's
mbeta=array(0,c(m,p))       #sets up arrays to store simulated draws: beta's
mmu=array(0,c(m,length(n))) #sets up arrays to store simulated draws: mu
ms2pi=array(0,c(m,1))       #sets up arrays to store simulated draws: (sigma^2_pi)
########################################  defines prior parameters
nu=c(107,6) #alpha_0
C=0
b1=array(nu,c(2,1)) #defines the prior mean for beta's \bar{\beta}
#Wishart distribution for variance and covariance matrix for beta´s distrib
#for 2 beta's, m iterations
R=diag(c(100, 0.1), 2, 2)
rho=2
rhoR=rho*R
rhoR_inv=solve(rhoR)
w<-rFractionalWishart(m, rho, rhoR_inv, covariance = FALSE, simplify = "array")
W<-apply(simplify2array(w), 1:2, mean, na.rm = TRUE)#WishartDistrib_simulated
bvar=array(W,c(2,2)) # prior inverse_covariance-variance 2x2 matrix:inverse_SIGMAbeta*
ibvar=solve(bvar) # inverse of inverse_SIGMAbeta*=SIGMAbeta*
s=0; v=0; #hyperparameters of the prior on (sigma^2) with inverse gamma form
#starting values of popu means(mu) and prior variance sigma^2=s2 in Gibbs Samp
mu=y; s2pi=1
for (j in 1:m)
{
## simulates the regression vector beta's,from a multivariate normal distribution,
pvar=solve(ibvar+t(X)%*%X/s2pi)               #variance-covariance matrix is stored
pmean=pvar%*%(ibvar%*%b1+t(X)%*%mu/s2pi)      #posterior mean (weights) is stored
beta=t(chol(pvar))%*%array(rnorm(p),c(p,1))+pmean #regression vector beta is stored
#Simulates the prior variance from an inverse gamma distribution
s2pi=(sum((mu-X%*%beta)^2)/2+s/2)/rgamma(1,shape=(N+v)/2)#simulates s2 (sigma^2)
#the components of mu have independent normal distributions: simulates mu
postvar=1/(1/s2+1/s2pi) #values of the posterior variances for the components of mu
postmean=(y/s2+X%*%beta/s2pi)*postvar  #posterior means for the components of mu
mu=rnorm(n,postmean,sqrt(postvar)) #simulates values from the n independent norm distr
#stores simulated draws
mbeta[j,]=t(beta)   #model beta's
mmu[j,]=t(mu)       #post means for weights (dependent variables)
ms2pi[j]=s2pi       #model variances sigma^2's
}
return(list(beta=mbeta,mu=mmu,var=ms2pi))
}
m=10000
sol=hiergibbs_normlin(d,m)
sol_beta1<-sol$beta[-(1:5000),1]
sol_beta1<-as.data.frame(sol_beta1)
p1 <- ggplot(data=sol_beta1, aes(x=sol_beta1)) +
geom_density(adjust=1.5, alpha=.4)+theme_bw()+
ylab("Densidad del peso inicial") +
xlab(expression(beta[1]))
p1
sol_beta2<-sol$beta[-(1:5000),2]
sol_beta2<-as.data.frame(sol_beta2)
p2 <- ggplot(data=sol_beta2, aes(x=sol_beta2)) +
geom_density(adjust=1.5, alpha=.4)+theme_bw()  +  ylab("Densidad de la tasa de crecimiento") +
xlab(expression(beta[2]))
p2
plot(sol$beta[,2],ylim=c(5.9,6.5),type="l", col="red", xlab="simulaciones", ylab=expression(beta[2]))
ergMean_beta2<-ergMean(sol$beta[,2])
plot(ergMean_beta2,ylim=c(6.1,6.2),type="l", col="red", xlab="simulaciones", ylab="convergencia")
posterior.means = apply(sol$mu, 2, mean)
posterior.means = as.data.frame(posterior.means, nrow = 150, ncol = 1,byrow = T)
d$postmean<-posterior.means$posterior.means
pr <- ggplot(data=d, aes(x=days, y=postmean)) +
geom_line(aes(group=rat), color="cyan4", linewidth=0.1) +
geom_point(color="darkred", size=2) +
labs(x="Edad (días)",y="posterior.means (del peso)",title="Medias posteriores de
los pesos individuales")+theme_bw()
pr
d_rat10<-d[46:50,]
m=10000
sol_drat10=hiergibbs_normlin(d_rat10,m)
rat10<-sol_drat10$mu
rat10<-as.data.frame(rat10)
prediction<-sol_drat10$beta[,1]+sol_drat10$beta[,2]*45
prediction<-as.data.frame(prediction)
rat10$d45<-prediction$prediction
rat10_pred45<-rat10$d45[-(1:5000)]
rat10_pred45<-as.data.frame(rat10_pred45)
p3 <- ggplot(data=rat10_pred45, aes(x=rat10_pred45)) +
geom_density(adjust=1.5, alpha=.4)+theme_bw()  +  ylab("Densidad") + ggtitle("Distribución predictiva final del peso \n de la rata 10 a los 45 días de edad")+
xlab(expression(Y[10.45]))
p3
r10_d45_line<-colMeans(rat10[-(1:5000),1:6])
rata10dta<-db[10,2:6]
#rata10dta$x6<-r10_d45_line[6]
rata10dta<-as.numeric(rata10dta)
plot(r10_d45_line, xlab="semanas", ylab="peso", pch = c("*","*", "*", "*", "*", "O"),
col="blue")
points(rata10dta, col="green")
d_rat3<-d[11:15,]
m=10000
sol_drat3=hiergibbs_normlin(d_rat3,m)
rat3<-sol_drat3$mu
rat3<-as.data.frame(rat3)
prediction2<-sol_drat3$beta[,1]+sol_drat3$beta[,2]*43
prediction2<-as.data.frame(prediction2)
rat3$d43<-prediction2$prediction2
rat3_pred43<-rat3$d43[-(1:5000)]
rat3_pred43<-as.data.frame(rat3_pred43)
p3 <- ggplot(data=rat3_pred43, aes(x=rat3_pred43)) +
geom_density(adjust=1.5, alpha=.4)+theme_bw()  +  ylab("Densidad") + ggtitle("Distribución predictiva final del peso \n de la rata 3 a los 43 días de edad")+
xlab(expression(Y[3.43]))
p3
r3_d43_line<-colMeans(rat3[-(1:5000),1:6])
rata3dta<-db[3,2:6]
#rata10dta$x6<-r10_d45_line[6]
rata3dta<-as.numeric(rata3dta)
plot(r3_d43_line, xlab="semanas", ylab="peso", pch = c("*","*", "*", "*", "*", "O"),
col="blue")
points(rata3dta, col="green")
rats_tratamiento<-db[31:60,2:6]
d2<-t(rats_tratamiento)
d2<-data.frame(x=unlist(d2))
d2<-data.frame(x=unlist(d2))
d2$week<-rep(c(1,2,3,4,5),times=30)
d2$days<-rep(c(8, 15, 22, 29, 36),times=30)
d2$rat<-rep(c(1:30),each=5)
d2$n<-rep(c(1),times=30)
colnames(d2)[1] ="weight"
d2<-d2%>%relocate(rat)
m=10000
sol2=hiergibbs_normlin(d2,m)
sol_beta2_2<-sol2$beta[-(1:5000),2]
sol_beta2_2<-as.data.frame(sol_beta2_2)
p4 <- ggplot(data=sol_beta2_2, aes(x=sol_beta2_2)) +
geom_density(adjust=1.5, alpha=.4)+theme_bw()+
ylab("Densidad") +
xlab(expression(beta[2]))
p4
colnames(sol_beta2_2)[1] ="growth"
sol_beta2_2$status<-"tratamiento"
colnames(sol_beta2)[1] ="growth"
sol_beta2$status<-"control"
beta_comparative<-rbind(sol_beta2, sol_beta2_2)
p5 <- ggplot(data=beta_comparative, aes(x=growth, group=status, fill=status)) +
geom_density(adjust=1.5, alpha=.4) +
xlab(expression(beta[2]))+ theme_bw()
p5
